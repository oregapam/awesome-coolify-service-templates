# documentation: https://docs.planka.cloud/
# slogan: Elegant open source project tracking
# tags: web,api,docker
# logo: svgs/planka.svg
# port: 80
# author: @oregapam
# repository: https://github.com/oregapam/awesome-coolify-service-templates

services:
  planka:
    image: ghcr.io/plankanban/planka:latest
    restart: on-failure
    volumes:
      - user-avatars:/app/public/user-avatars
      - project-background-images:/app/public/project-background-images
      - attachments:/app/private/attachments
    environment:
      - SERVICE_FQDN_PLANKA_1337
      - BASE_URL=$SERVICE_FQDN_PLANKA
      - 'DATABASE_URL=postgresql://${SERVICE_USER_POSTGRES}:${SERVICE_PASSWORD_POSTGRES}@postgres:5432/${POSTGRES_DB}'
      - SECRET_KEY=${SERVICE_BASE64_64_PLANKA}

      - LOG_LEVEL=${LOG_LEVEL:-warn}

      - TRUST_PROXY=${TRUST_PROXY:-0}
      - TOKEN_EXPIRES_IN=${TOKEN_EXPIRES_IN:-365} # In days

      # related: https://github.com/knex/knex/issues/2354
      # As knex does not pass query parameters from the connection string we
      # have to use environment variables in order to pass the desired values, e.g.
      # - PGSSLMODE=<value>

      # Configure knex to accept SSL certificates
      # - KNEX_REJECT_UNAUTHORIZED_SSL_CERTIFICATE=false

      - DEFAULT_ADMIN_EMAIL=${ADMIN_EMAIL:-user@domain.tld} # Do not remove if you want to prevent this user from being edited/deleted
      - DEFAULT_ADMIN_NAME=${SERVICE_NAME_ADMIN:-Admin}
      - DEFAULT_ADMIN_USERNAME=${SERVICE_USER_ADMIN}
      - DEFAULT_ADMIN_PASSWORD=${SERVICE_PASSWORD_ADMIN}

      - SHOW_DETAILED_AUTH_ERRORS=${SHOW_DETAILED_AUTH_ERRORS:-false} #Â Set to true to show more detailed authentication error messages. It should not be enabled without a rate limiter for security reasons.
      - ALLOW_ALL_TO_CREATE_PROJECTS=true${ALLOW_ALL_TO_CREATE_PROJECTS:-true}

      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_REGION=${S3_REGION}
      - S3_ACCESS_KEY_ID=${S3_ACCESS_KEY_ID}
      - S3_SECRET_ACCESS_KEY=${S3_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BUCKET}
      - S3_FORCE_PATH_STYLE=${S3_FORCE_PATH_STYLE:-true}

      # - OIDC_ISSUER=
      # - OIDC_CLIENT_ID=
      # - OIDC_CLIENT_SECRET=
      # - OIDC_ID_TOKEN_SIGNED_RESPONSE_ALG=
      # - OIDC_USERINFO_SIGNED_RESPONSE_ALG=
      # - OIDC_SCOPES=openid email profile
      # - OIDC_RESPONSE_MODE=fragment
      # - OIDC_USE_DEFAULT_RESPONSE_MODE=true
      # - OIDC_ADMIN_ROLES=admin
      # - OIDC_CLAIMS_SOURCE=userinfo
      # - OIDC_EMAIL_ATTRIBUTE=email
      # - OIDC_NAME_ATTRIBUTE=name
      # - OIDC_USERNAME_ATTRIBUTE=preferred_username
      # - OIDC_ROLES_ATTRIBUTE=groups
      # - OIDC_IGNORE_USERNAME=true
      # - OIDC_IGNORE_ROLES=true
      # - OIDC_ENFORCED=true

      # Email Notifications (https://nodemailer.com/smtp/)
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_NAME=${SMTP_NAME}
      - SMTP_SECURE=${SMTP_SECURE:-true}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_FROM=${SMTP_FROM:-'"Demo Demo" <demo@demo.demo>'}
      - SMTP_TLS_REJECT_UNAUTHORIZED=${SMTP_TLS_REJECT_UNAUTHORIZED:-false}

      # Optional fields: accessToken, events, excludedEvents
      # - |
      #   WEBHOOKS=[{
      #     "url": "http://localhost:3001",
      #     "accessToken": "notaccesstoken",
      #     "events": ["cardCreate", "cardUpdate", "cardDelete"],
      #     "excludedEvents": ["notificationCreate", "notificationUpdate"]
      #   }]

      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_CHANNEL_ID=${SLACK_CHANNEL_ID}

      - GOOGLE_CHAT_WEBHOOK_URL=${GOOGLE_CHAT_WEBHOOK_URL}

      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - TELEGRAM_THREAD_ID=${TELEGRAM_THREAD_ID}
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:16-alpine
    restart: on-failure
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - 'POSTGRES_USER=${SERVICE_USER_POSTGRES}'
      - 'POSTGRES_PASSWORD=${SERVICE_PASSWORD_POSTGRES}'
      - 'POSTGRES_DB=${POSTGRES_DB:-planka}'
      - POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      test:
        - CMD-SHELL
        - 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}'
      interval: 5s
      timeout: 20s
      retries: 10

volumes:
  user-avatars:
  project-background-images:
  attachments:
  db-data: